// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	io "io"

	storage "github.com/podtserkovskiy/garnerd/storage"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// GetAllMeta provides a mock function with given fields:
func (_m *Storage) GetAllMeta() ([]storage.Meta, error) {
	ret := _m.Called()

	var r0 []storage.Meta
	if rf, ok := ret.Get(0).(func() []storage.Meta); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Meta)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMeta provides a mock function with given fields: imageName
func (_m *Storage) GetMeta(imageName string) (storage.Meta, error) {
	ret := _m.Called(imageName)

	var r0 storage.Meta
	if rf, ok := ret.Get(0).(func(string) storage.Meta); ok {
		r0 = rf(imageName)
	} else {
		r0 = ret.Get(0).(storage.Meta)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(imageName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Load provides a mock function with given fields: imageName
func (_m *Storage) Load(imageName string) (io.ReadCloser, error) {
	ret := _m.Called(imageName)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(string) io.ReadCloser); ok {
		r0 = rf(imageName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(imageName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: imageName
func (_m *Storage) Remove(imageName string) error {
	ret := _m.Called(imageName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(imageName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: imageName, imageID, imageDump
func (_m *Storage) Save(imageName string, imageID string, imageDump io.Reader) error {
	ret := _m.Called(imageName, imageID, imageDump)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, io.Reader) error); ok {
		r0 = rf(imageName, imageID, imageDump)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
