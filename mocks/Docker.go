// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	docker "github.com/podtserkovskiy/garnerd/docker"

	mock "github.com/stretchr/testify/mock"
)

// Docker is an autogenerated mock type for the Docker type
type Docker struct {
	mock.Mock
}

// ContainsSameVersion provides a mock function with given fields: ctx, yourImageID, imageName
func (_m *Docker) ContainsSameVersion(ctx context.Context, yourImageID string, imageName string) (bool, error) {
	ret := _m.Called(ctx, yourImageID, imageName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, yourImageID, imageName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, yourImageID, imageName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImageID provides a mock function with given fields: ctx, imageName
func (_m *Docker) ImageID(ctx context.Context, imageName string) (string, bool, error) {
	ret := _m.Called(ctx, imageName)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, imageName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, imageName)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, imageName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListenContainerCreation provides a mock function with given fields: ctx
func (_m *Docker) ListenContainerCreation(ctx context.Context) <-chan docker.ContainerCreated {
	ret := _m.Called(ctx)

	var r0 <-chan docker.ContainerCreated
	if rf, ok := ret.Get(0).(func(context.Context) <-chan docker.ContainerCreated); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan docker.ContainerCreated)
		}
	}

	return r0
}

// LoadDump provides a mock function with given fields: ctx, image
func (_m *Docker) LoadDump(ctx context.Context, image io.Reader) error {
	ret := _m.Called(ctx, image)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader) error); ok {
		r0 = rf(ctx, image)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveDump provides a mock function with given fields: ctx, name
func (_m *Docker) SaveDump(ctx context.Context, name string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, name)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, string) io.ReadCloser); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Wait provides a mock function with given fields: ctx
func (_m *Docker) Wait(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
